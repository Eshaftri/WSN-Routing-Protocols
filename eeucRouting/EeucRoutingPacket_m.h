//
// Generated file, do not edit! Created by opp_msgc 4.5 from src/node/communication/routing/eeucRouting/EeucRoutingPacket.msg.
//

#ifndef _EEUCROUTINGPACKET_M_H_
#define _EEUCROUTINGPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "RoutingPacket_m.h"
// }}



/**
 * Enum generated from <tt>src/node/communication/routing/eeucRouting/EeucRoutingPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum EeucRoutingPacket_Type
 * {
 * 	EEUC_ROUTING_ADV_PACKET 	= 1;		
 * 	EEUC_ROUTING_JOIN_PACKET 	= 2;		
 * 	EEUC_ROUTING_TDMA_PACKET 	= 3;		
 * 	EEUC_ROUTING_DATA_PACKET 	= 4;
 * 	EEUC_ROUTING_COMPETECH_PACKET = 5;
 * 	EEUC_ROUTING_FINALHEAD_PACKET = 6;
 * 	EEUC_ROUTING_QUITELECTION_PACKET = 7;
 * 	EEUC_ROUTING_ADJACENTCH_PACKET = 8;
 * 	EEUC_ROUTING_AGGREGATEDADJACENT_PACKET = 9;
 * };
 * </pre>
 */
enum EeucRoutingPacket_Type {
    EEUC_ROUTING_ADV_PACKET = 1,
    EEUC_ROUTING_JOIN_PACKET = 2,
    EEUC_ROUTING_TDMA_PACKET = 3,
    EEUC_ROUTING_DATA_PACKET = 4,
    EEUC_ROUTING_COMPETECH_PACKET = 5,
    EEUC_ROUTING_FINALHEAD_PACKET = 6,
    EEUC_ROUTING_QUITELECTION_PACKET = 7,
    EEUC_ROUTING_ADJACENTCH_PACKET = 8,
    EEUC_ROUTING_AGGREGATEDADJACENT_PACKET = 9
};

/**
 * Class generated from <tt>src/node/communication/routing/eeucRouting/EeucRoutingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet EeucRoutingPacket extends RoutingPacket
 * {	
 * 	int EeucRoutingPacketKind enum (EeucRoutingPacket_Type);   
 * 	int schedule[];	
 * 	double x;
 * 	double y;
 * 	double RComp;
 * 	double SpentEnergy;	
 * 	double BSDistance;
 * };
 * </pre>
 */
class EeucRoutingPacket : public ::RoutingPacket
{
  protected:
    int EeucRoutingPacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;
    double x_var;
    double y_var;
    double RComp_var;
    double SpentEnergy_var;
    double BSDistance_var;

  private:
    void copy(const EeucRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EeucRoutingPacket&);

  public:
    EeucRoutingPacket(const char *name=NULL, int kind=0);
    EeucRoutingPacket(const EeucRoutingPacket& other);
    virtual ~EeucRoutingPacket();
    EeucRoutingPacket& operator=(const EeucRoutingPacket& other);
    virtual EeucRoutingPacket *dup() const {return new EeucRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getEeucRoutingPacketKind() const;
    virtual void setEeucRoutingPacketKind(int EeucRoutingPacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
    virtual double getRComp() const;
    virtual void setRComp(double RComp);
    virtual double getSpentEnergy() const;
    virtual void setSpentEnergy(double SpentEnergy);
    virtual double getBSDistance() const;
    virtual void setBSDistance(double BSDistance);
};

inline void doPacking(cCommBuffer *b, EeucRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EeucRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // _EEUCROUTINGPACKET_M_H_
