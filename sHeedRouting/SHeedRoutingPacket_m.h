//
// Generated file, do not edit! Created by opp_msgc 4.5 from src/node/communication/routing/sHeedRouting/SHeedRoutingPacket.msg.
//

#ifndef _SHEEDROUTINGPACKET_M_H_
#define _SHEEDROUTINGPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "RoutingPacket_m.h"
// }}



/**
 * Enum generated from <tt>src/node/communication/routing/sHeedRouting/SHeedRoutingPacket.msg</tt> by opp_msgc.
 * <pre>
 * enum SHeedRoutingPacket_Type
 * {
 * 	SHEED_ROUTING_ADV_PACKET 	= 1;		
 * 	SHEED_ROUTING_JOIN_PACKET 	= 2;		
 * 	SHEED_ROUTING_TDMA_PACKET 	= 3;		
 * 	SHEED_ROUTING_DATA_PACKET 	= 4;
 * 	SHEED_ROUTING_NIDV_PACKET   = 5;
 * 	SHEED_ROUTING_RADV_PACKET   = 6;
 * };
 * </pre>
 */
enum SHeedRoutingPacket_Type {
    SHEED_ROUTING_ADV_PACKET = 1,
    SHEED_ROUTING_JOIN_PACKET = 2,
    SHEED_ROUTING_TDMA_PACKET = 3,
    SHEED_ROUTING_DATA_PACKET = 4,
    SHEED_ROUTING_NIDV_PACKET = 5,
    SHEED_ROUTING_RADV_PACKET = 6
};

/**
 * Struct generated from src/node/communication/routing/sHeedRouting/SHeedRoutingPacket.msg by opp_msgc.
 */
struct NDInf
{
    NDInf();
    int src;
    double eng;
};

void doPacking(cCommBuffer *b, NDInf& a);
void doUnpacking(cCommBuffer *b, NDInf& a);

/**
 * Class generated from <tt>src/node/communication/routing/sHeedRouting/SHeedRoutingPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet SHeedRoutingPacket extends RoutingPacket
 * {	
 * 	int SHeedRoutingPacketKind enum (SHeedRoutingPacket_Type);   
 * 	int cost;
 * 	double eng;
 * 	bool status;
 * 	NDInf clusterMembers[];		
 * };
 * </pre>
 */
class SHeedRoutingPacket : public ::RoutingPacket
{
  protected:
    int SHeedRoutingPacketKind_var;
    int cost_var;
    double eng_var;
    bool status_var;
    NDInf *clusterMembers_var; // array ptr
    unsigned int clusterMembers_arraysize;

  private:
    void copy(const SHeedRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SHeedRoutingPacket&);

  public:
    SHeedRoutingPacket(const char *name=NULL, int kind=0);
    SHeedRoutingPacket(const SHeedRoutingPacket& other);
    virtual ~SHeedRoutingPacket();
    SHeedRoutingPacket& operator=(const SHeedRoutingPacket& other);
    virtual SHeedRoutingPacket *dup() const {return new SHeedRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSHeedRoutingPacketKind() const;
    virtual void setSHeedRoutingPacketKind(int SHeedRoutingPacketKind);
    virtual int getCost() const;
    virtual void setCost(int cost);
    virtual double getEng() const;
    virtual void setEng(double eng);
    virtual bool getStatus() const;
    virtual void setStatus(bool status);
    virtual void setClusterMembersArraySize(unsigned int size);
    virtual unsigned int getClusterMembersArraySize() const;
    virtual NDInf& getClusterMembers(unsigned int k);
    virtual const NDInf& getClusterMembers(unsigned int k) const {return const_cast<SHeedRoutingPacket*>(this)->getClusterMembers(k);}
    virtual void setClusterMembers(unsigned int k, const NDInf& clusterMembers);
};

inline void doPacking(cCommBuffer *b, SHeedRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SHeedRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // _SHEEDROUTINGPACKET_M_H_
